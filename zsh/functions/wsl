#!/bin/env zsh

function open() {
    if [ $# -eq 0 ]; then
        wslview $(pwd) 2&>/dev/null
    else
        for arg in "$@"; do
            wslview "$arg" 2&>/dev/null
        done
    fi
}

github() {
  if ! git rev-parse --is-inside-work-tree &>/dev/null; then
    echo "Not in a git repository"
    return 1
  fi

  # Get the remote origin URL
  local remote_url=$(git config --get remote.origin.url)

  if [[ -z "$remote_url" ]]; then
    echo "No remote origin found"
    return 1
  fi

  if [[ "$remote_url" == git@* ]]; then
    remote_url=$(echo "$remote_url" | sed -E 's|git@([^:]+):|https://\1/|' | sed 's|\.git$||')
  elif [[ "$remote_url" == https://* ]]; then
    remote_url=$(echo "$remote_url" | sed 's|\.git$||')
  fi

  # Check if this is a GitHub repository
  if [[ "$remote_url" == *github.com* ]]; then
    local branch=$(git symbolic-ref --short HEAD 2>/dev/null)

    if [[ -n "$branch" ]]; then
      remote_url="${remote_url}/tree/${branch}"
    fi
  fi

  open "$remote_url"
}

jira() {
  # Check if any arguments are provided and open them as JIRA issues
  for arg in "$@"; do
    open "https://antistatique.atlassian.net/browse/${arg}"
  done
  if [ $# -ne 0 ]; then
      return
  fi

  # If no arguments are provided, try to extract the JIRA issue from the current branch
  if ! git rev-parse --is-inside-work-tree &>/dev/null; then
    echo "Not in a git repository"
    return 1
  fi

  local issue=$(git branch --show-current | sed 's/.*\/\([a-zA-Z]\+-[0-9]\+\).*/\1/')

  if [[ -z "$issue" ]]; then
    echo "No JIRA issue found in the current branch"
    return 1
  fi

  open "https://antistatique.atlassian.net/browse/${issue}"
}