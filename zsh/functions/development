#!/bin/env zsh

function project_name() {
  name=$(pwd | sed -n 's:\(^.*/[^/]*/[^/]*\).*$:\1:p' | tr -d '.' | awk -F/ '{print $(NF-1) "/" $(NF)}' | tr '/' '-')
  if [ -z "$name" ]; then
    name='default'
  fi

  echo "$name"
}

function _docker_backend_service() {
  docker compose config --services 2>/dev/null | grep -E '(dev|backend)'  | tr '\n' ' ' | sed 's/ $//'
}

function dev() {
  local target_dir="${HOME}/Development"

  if [[ $# -eq 1 ]]; then
    target_dir="${HOME}/Development/$1"
  fi

  if [[ $# -eq 2 ]]; then
    target_dir="${HOME}/Development/$1/$2"
  fi

  if [[ "$PWD" == "$target_dir" ]]; then
    return
  fi

  cd "$target_dir"
}

function dotfiles() {
  cd ~/.dotfiles
}

function drush() {
  docker compose  -p $(project_name) exec $(_docker_backend_service) ./vendor/bin/drush "$@"
}

function docker-as-drupal() {
  docker compose  -p $(project_name) exec $(_docker_backend_service) docker-as-drupal "$@"
}

function docker-as-wordpress() {
  docker compose  -p $(project_name) exec $(_docker_backend_service) docker-as-wordpress "$@"
}

function wp() {
  docker compose  -p $(project_name) exec $(_docker_backend_service) wp "$@"
}

function php-cs-fixer() {
if [[ -d "tools/php-cs-fixer" ]]; then
  (
    cd tools/php-cs-fixer
    composer install
  )

  ./tools/php-cs-fixer/vendor/bin/php-cs-fixer "$@"
  return
fi

echo "./tools/php-cs-fixer do not exist"
}

function phpcs() {
  if [[ -f ./vendor/bin/phpcs ]]; then
    ./vendor/bin/phpcs "$@"
    return
  fi

  echo "./vendor/bin/phpcs do not exist"
}

function phpcbf() {
  if [[ -f ./vendor/bin/phpcbf ]]; then
    ./vendor/bin/phpcbf "$@"
    return
  fi

  echo "./vendor/bin/phpcbf do not exist"
}
